import os
import time
import random
import subprocess
import sys
import hashlib
import base58


# ================== –ù–ê–°–¢–†–û–ô–ö–ò –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ ==================
ETARKANGAROO_EXE = "Etarkangaroo.exe"  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ª–µ–∂–∏—Ç –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ
GRID_PARAMS = "88,128"                 # –ë–∞–∑–æ–≤—ã–π grid (–ø–æ–¥–±–∏—Ä–∞–µ—Ç—Å—è –ø–æ–¥ GPU)
DP = 16                                # Distinguished points
SCAN_DURATION = 300                    # 5 –º–∏–Ω—É—Ç –Ω–∞ —Å–µ–∞–Ω—Å
SUBRANGE_BITS = 32                     # –†–∞–∑–º–µ—Ä –ø–æ–¥–¥–∏–∞–ø–∞–∑–æ–Ω–∞: 2^32
TEMP_DIR = "./kangaroo_work/"
os.makedirs(TEMP_DIR, exist_ok=True)
# ============================================================


def sha256(data):
    return hashlib.sha256(data).digest()


def ripemd160(data):
    h = hashlib.new('ripemd160')
    h.update(data)
    return h.digest()


def hash160(pubkey_bytes):
    return ripemd160(sha256(pubkey_bytes))


def pubkey_to_p2pkh_address(pubkey_hex):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –≤ P2PKH –∞–¥—Ä–µ—Å"""
    try:
        pubkey_bytes = bytes.fromhex(pubkey_hex)
        if len(pubkey_bytes) not in (33, 65):
            print(f"[!] –ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞: {len(pubkey_bytes)}")
            return None
        h160 = hash160(pubkey_bytes)
        versioned = b'\x00' + h160
        checksum = sha256(sha256(versioned))[:4]
        address = base58.b58encode(versioned + checksum)
        return address.decode('utf-8')
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞: {e}")
        return None


def get_gpu_list():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ GPU —á–µ—Ä–µ–∑ nvidia-smi"""
    try:
        result = subprocess.run(
            ['nvidia-smi', '--query-gpu=index,name,driver_version,memory.total',
             '--format=csv,noheader'],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            check=False
        )
        if result.returncode != 0:
            return None
        gpus = []
        for line in result.stdout.strip().split('\n'):
            if line:
                parts = line.split(', ')
                idx = parts[0]
                name = parts[1]
                gpus.append((idx, name))
        return gpus
    except FileNotFoundError:
        return None  # nvidia-smi –Ω–µ –Ω–∞–π–¥–µ–Ω
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ GPU: {e}")
        return None


def select_gpus():
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å GPU (–æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ)"""
    print("üîç –ü–æ–∏—Å–∫ GPU...\n")
    gpus = get_gpu_list()

    if not gpus:
        print("[‚ö†Ô∏è] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ GPU.")
        print("     –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥—Ä–∞–π–≤–µ—Ä—ã NVIDIA –∏ nvidia-smi —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        print("     –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ ID GPU –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0,1,2)")
        gpu_input = input("–í–≤–µ–¥–∏—Ç–µ ID GPU: ").strip()
        return gpu_input

    print("üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ GPU:")
    for i, (idx, name) in enumerate(gpus):
        print(f"   [{i}] ID: {idx} | {name}")

    print("\n–í—ã–±–µ—Ä–∏—Ç–µ GPU:")
    print("   –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0)")
    print("   –ò–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0,1)")
    print("   –ò–ª–∏ 'all' –¥–ª—è –≤—Å–µ—Ö")

    choice = input("–í—ã–±–æ—Ä: ").strip()

    selected_ids = []
    if choice.lower() == 'all':
        selected_ids = [idx for idx, _ in gpus]
    else:
        try:
            indices = [int(x.strip()) for x in choice.split(',')]
            for i in indices:
                if 0 <= i < len(gpus):
                    selected_ids.append(gpus[i][0])
                else:
                    print(f"[‚ùå] –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å: {i}")
            if not selected_ids:
                print("[‚ùå] –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤.")
                sys.exit(1)
        except ValueError:
            print("[‚ùå] –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.")
            sys.exit(1)

    print(f"\n‚úÖ –í—ã–±—Ä–∞–Ω—ã GPU: {','.join(selected_ids)}")
    return ','.join(selected_ids)


def hex_to_int(h):
    return int(h.strip(), 16)


def int_to_hex(x):
    return f"{x:064x}"


def random_subrange(full_start, full_end, bits=32):
    width = (1 << bits)
    max_start = full_end - width
    if max_start <= full_start:
        return full_start, full_end
    rand_start = random.randint(full_start, max_start)
    rand_end = rand_start + width
    return rand_start, rand_end


def get_grid_for_gpu(gpu_name):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π grid –ø–æ–¥ GPU"""
    gpu_name = gpu_name.lower()
    if 'rtx 4090' in gpu_name:
        return "104,256"
    elif 'rtx 4080' in gpu_name:
        return "96,256"
    elif 'rtx 3090' in gpu_name or 'rtx 3080' in gpu_name:
        return "96,256"
    elif 'rtx 3070' in gpu_name:
        return "92,256"
    elif 'rtx 3060' in gpu_name or 'gtx 1660' in gpu_name or 'gtx 1650' in gpu_name:
        return "88,128"
    elif 'rtx 20' in gpu_name or 'gtx 10' in gpu_name:
        return "64,128"  # —Å—Ç–∞—Ä—ã–µ GPU
    else:
        print(f"[‚ö†Ô∏è] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è GPU: {gpu_name}. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π grid: {GRID_PARAMS}")
        return GRID_PARAMS


def main():
    print("üîç EtarKangaroo ‚Äî –ú—É–ª—å—Ç–∏-GPU –ê–≤—Ç–æ—Å–∫–∞–Ω–µ—Ä")
    print("‚öôÔ∏è  –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∏–¥–µ–æ–∫–∞—Ä—Ç\n")

    # === –í–´–ë–û–† GPU ===
    gpu_ids = select_gpus()

    # –ü–æ–ª—É—á–∏–º –º–æ–¥–µ–ª—å –ø–µ—Ä–≤–æ–π GPU –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ grid
    gpus = get_gpu_list()
    if gpus and gpus[0][0] in gpu_ids.split(','):
        first_gpu_name = gpus[0][1]
    else:
        first_gpu_name = "unknown"
    grid = get_grid_for_gpu(first_gpu_name)
    print(f"[üîß] –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä grid: {grid} (–ø–æ–¥ {first_gpu_name})\n")

    # === –î–ê–ù–ù–´–ï ===
    target_address = "16RGFo6hjq9ym6Pj7N5H7L1NR1rVPJyw2v"
    pubkey_hex = "02145d2611c823a396ef6712ce0f712f09b9b4f3135e3e0aa3230fb9b6d08d1e16"
    rb_hex = "00000000000000000000000000000040067A9BF03190CC89839FBA76C6D897DF"
    re_hex = "00000000000000000000000000000058067A9BF03190CC89839FBA76C6D897DF"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
    derived_addr = pubkey_to_p2pkh_address(pubkey_hex)
    if not derived_addr:
        print("[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞.")
        sys.exit(1)

    if derived_addr != target_address:
        print(f"[‚ö†Ô∏è] –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –¥–∞—ë—Ç –∞–¥—Ä–µ—Å: {derived_addr}")
        print(f"      –ù–æ –≤—ã –∏—â–µ—Ç–µ: {target_address}")
        cont = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
        if cont.lower() != 'y':
            sys.exit(0)
    else:
        print(f"[‚úÖ] –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∞–¥—Ä–µ—Å—É: {target_address}")

    # –ü–∞—Ä—Å–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω
    try:
        rb = hex_to_int(rb_hex)
        re = hex_to_int(re_hex)
    except Exception as e:
        print(f"[‚ùå] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {e}")
        sys.exit(1)

    if rb >= re:
        print("[‚ùå] –ù–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ >= –∫–æ–Ω—Ü–∞")
        sys.exit(1)

    print(f"[üìä] –û–±—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω: {int_to_hex(rb)} ‚Üí {int_to_hex(re)}")
    print(f"[‚öôÔ∏è] –ü–æ–¥–¥–∏–∞–ø–∞–∑–æ–Ω: 2^{SUBRANGE_BITS} –∫–ª—é—á–µ–π")
    print(f"[‚è±] –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–∞–Ω—Å–∞: {SCAN_DURATION} —Å–µ–∫—É–Ω–¥")
    print(f"[üîÑ] –ù–æ–≤—ã–π —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ–¥–¥–∏–∞–ø–∞–∑–æ–Ω –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç...\n")

    session_id = 1
    while True:
        print(f"üìå –°–ï–ê–ù–° #{session_id}")
        session_id += 1

        start, end = random_subrange(rb, re, SUBRANGE_BITS)
        rb_sub = int_to_hex(start)
        re_sub = int_to_hex(end)

        kf_file = f"{TEMP_DIR}kang_{session_id}.dat"
        wf_file = f"{TEMP_DIR}ht_{session_id}.dat"
        result_file = f"{TEMP_DIR}result_{session_id}.txt"

        cmd = [
            ETARKANGAROO_EXE,
            "-dp", str(DP),
            "-d", gpu_ids,
            "-grid", grid,
            "-rb", rb_sub,
            "-re", re_sub,
            "-pub", pubkey_hex,
            "-o", result_file,
            "-kf", kf_file,
            "-wf", wf_file,
            "-wi", str(SCAN_DURATION),
            "-wsplit",
            "-wmerge"
        ]

        print(f"üöÄ –ó–∞–ø—É—Å–∫ EtarKangaroo...")
        print(f"   GPU: {gpu_ids}")
        print(f"   –î–∏–∞–ø–∞–∑–æ–Ω: {rb_sub} ‚Üí {re_sub}")
        cmd_str = " ".join(cmd)
        print(f"   –ö–æ–º–∞–Ω–¥–∞: {cmd_str[:100]}...")

        try:
            proc = subprocess.Popen(
                cmd,
                cwd=os.path.dirname(ETARKANGAROO_EXE) or ".",
                creationflags=subprocess.CREATE_NEW_CONSOLE
            )

            time.sleep(SCAN_DURATION)

            print(f"‚èπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ–∞–Ω—Å–∞ #{session_id}...")
            proc.terminate()
            try:
                proc.wait(timeout=15)
            except subprocess.TimeoutExpired:
                proc.kill()

            if os.path.exists(result_file):
                with open(result_file, "r") as f:
                    content = f.read().strip()
                if content:
                    print(f"üéâ üîë –ö–õ–Æ–ß –ù–ê–ô–î–ï–ù! –°–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {result_file}")
                    print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {content}")
                    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
                    sys.exit(0)
                else:
                    print("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º —Å–µ–∞–Ω—Å–µ.")
            else:
                print("‚ùå –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω.")

        except KeyboardInterrupt:
            print("\n\nüëã –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            break
        except Exception as e:
            print(f"[‚ö†Ô∏è] –û—à–∏–±–∫–∞: {e}")

        print(f"üí§ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–µ–∞–Ω—Å–æ–º...\n")
        time.sleep(3)

    print("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ.")


if __name__ == "__main__":
    main()