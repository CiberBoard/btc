import subprocess
import time
import random
import platform
import logging

import logger
from PyQt5.QtCore import QThread, pyqtSignal


try:
    import pynvml
    PYNVML_AVAILABLE = True
except ImportError:
    PYNVML_AVAILABLE = False
    pynvml = None
    btc.warning("pynvml –Ω–µ –Ω–∞–π–¥–µ–Ω. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ GPU –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")


try:
    import win32process
    import win32api

    WIN32_AVAILABLE = True
except ImportError:
    WIN32_AVAILABLE = False

import config
from utils.helpers import validate_key_range, private_key_to_wif

logger = logging.getLogger('bitcoin_scanner')


class OptimizedOutputReader(QThread):
    """–ß—Ç–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ GPU –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    log_message = pyqtSignal(str, str)  # message, level
    stats_update = pyqtSignal(dict)  # {'speed': float, 'checked': int}
    found_key = pyqtSignal(dict)  # key_data dict
    process_finished = pyqtSignal()

    def __init__(self, process, parent=None):
        super().__init__(parent)
        self.process = process
        self.current_address = None
        self.current_private_key = None
        self.last_speed = 0.0
        self.last_checked = 0

    def run(self):
        buffer = ""
        try:
            while self.process and self.process.poll() is None:
                chunk = self.process.stdout.read(1024)
                if chunk:
                    buffer += chunk
                    lines = buffer.split('\n')
                    buffer = lines[-1]
                    for line in lines[:-1]:
                        if line.strip():
                            self.process_line(line.strip())
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä —á–∞—â–µ
                # QApplication.processEvents() - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ UI –ø–æ—Ç–æ–∫
                time.sleep(0.01)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
            if buffer.strip():
                for line in buffer.strip().split('\n'):
                    self.process_line(line.strip())
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ GPU")
            self.log_message.emit(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞: {str(e)}", "error")
        finally:
            self.process_finished.emit()

    def process_line(self, line):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –≤—ã–≤–æ–¥–∞ GPU"""
        line_lower = line.lower()
        if "–æ—à–∏–±–∫–∞" in line or "error" in line_lower:
            self.log_message.emit(line, "error")
            logger.error(f"GPU Error: {line}")
        elif "–Ω–∞–π–¥–µ–Ω –∫–ª—é—á" in line or "found key" in line_lower:
            self.log_message.emit(line, "success")
            logger.info(f"GPU Key Found: {line}")
        else:
            self.log_message.emit(line, "normal")
            logger.debug(f"GPU Output: {line}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        speed_match = config.SPEED_REGEX.search(line)
        total_match = config.TOTAL_REGEX.search(line)
        if speed_match or total_match:
            speed = float(speed_match.group(1)) if speed_match else self.last_speed
            checked = int(total_match.group(1).replace(',', '')) if total_match else self.last_checked
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if speed_match: self.last_speed = speed
            if total_match: self.last_checked = checked
            self.stats_update.emit({'speed': speed, 'checked': checked})

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
        addr_match = config.ADDR_REGEX.search(line)
        if addr_match:
            self.current_address = addr_match.group(1)
        key_match = config.KEY_REGEX.search(line)
        if key_match:
            self.current_private_key = key_match.group(1)

        if self.current_address and self.current_private_key:
            self.process_found_key()

    def process_found_key(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞"""
        try:
            wif_key = private_key_to_wif(self.current_private_key)
            found_data = {
                'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
                'address': self.current_address,
                'hex_key': self.current_private_key,
                'wif_key': wif_key,
                'source': 'GPU'
            }
            self.found_key.emit(found_data)
            self.log_message.emit(f"üîë –ù–ê–ô–î–ï–ù –ö–õ–Æ–ß! –ê–¥—Ä–µ—Å: {self.current_address}", "success")
            self.current_address = None
            self.current_private_key = None
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞")
            self.log_message.emit(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞: {str(e)}", "error")


def start_gpu_search_with_range(target_address, start_key, end_key, device, blocks, threads, points, priority_index,
                                parent_window):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç GPU –ø–æ–∏—Å–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º"""
    logger.info(f"–ó–∞–ø—É—Å–∫ GPU –ø–æ–∏—Å–∫–∞ –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {hex(start_key)} - {hex(end_key)} –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ {device}")

    cmd = [
        config.CUBITCRACK_EXE,
        "-d", str(device),
        "-b", str(blocks),
        "-t", str(threads),
        "-p", str(points),
        "--keyspace", f"{hex(start_key)[2:].upper()}:{hex(end_key)[2:].upper()}",
        target_address
    ]

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ (Windows)
    creationflags = 0
    if platform.system() == 'Windows':
        priority_value = config.WINDOWS_GPU_PRIORITY_MAP.get(priority_index,
                                                             0x00000020)  # NORMAL_PRIORITY_CLASS –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        creationflags = subprocess.CREATE_NEW_PROCESS_GROUP | priority_value

    try:
        logger.debug(f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ cuBitcrack: {' '.join(cmd)}")
        cuda_process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True,
            bufsize=0,
            cwd=config.BASE_DIR,
            creationflags=creationflags
        )

        output_reader = OptimizedOutputReader(cuda_process)
        # output_reader.log_message.connect(parent_window.append_log) # –ë—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –≤ UI
        # output_reader.stats_update.connect(parent_window.update_gpu_stats_display)
        # output_reader.found_key.connect(parent_window.handle_found_key)
        # output_reader.process_finished.connect(parent_window.handle_gpu_search_finished)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è Windows (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)
        if platform.system() == 'Windows' and priority_index > 0 and WIN32_AVAILABLE:
            try:
                priority_value = config.WINDOWS_GPU_PRIORITY_MAP.get(priority_index, 0x00000020)
                handle = win32api.OpenProcess(win32process.PROCESS_ALL_ACCESS, True, cuda_process.pid)
                win32process.SetPriorityClass(handle, priority_value)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {str(e)}")

        return cuda_process, output_reader

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ cuBitcrack –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ {device}")
        raise e  # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –≤—ã–∑—ã–≤–∞—é—â–∏–π –∫–æ–¥


def stop_gpu_search_internal(processes):
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ GPU –ø–æ–∏—Å–∫–∞"""
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ GPU –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
    for process, reader in processes:
        try:
            process.terminate()
            process.wait(timeout=5)
        except:
            try:
                process.kill()
            except:
                pass
        try:
            reader.quit()
            reader.wait(1000)
        except:
            pass
    processes.clear()
    logger.info("GPU –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")


def generate_gpu_random_range(global_start_hex, global_end_hex, min_range_size_str, max_range_size_str, used_ranges,
                              max_saved_random):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
        global_result, error = validate_key_range(global_start_hex, global_end_hex)
        if global_result is None:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {error}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã UI –º–æ–≥ –µ–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å
            return None, None, error
        global_start, global_end, total_keys = global_result

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        try:
            min_range_size = int(min_range_size_str)
            max_range_size = int(max_range_size_str)
        except ValueError:
            error_msg = "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏"
            logger.error(error_msg)
            return None, None, error_msg

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        if min_range_size <= 0 or max_range_size <= 0:
            error_msg = "–†–∞–∑–º–µ—Ä—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏"
            logger.error(error_msg)
            return None, None, error_msg
        if min_range_size > total_keys:
            min_range_size = total_keys
        if max_range_size > total_keys:
            max_range_size = total_keys
        if min_range_size > max_range_size:
            min_range_size, max_range_size = max_range_size, min_range_size

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        range_size = random.randint(min_range_size, max_range_size)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É
        max_start = global_end - range_size + 1
        if max_start < global_start:
            max_start = global_start

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π RNG –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if platform.system() == 'Windows':
            start_key = random.SystemRandom().randint(global_start, max_start)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º /dev/urandom –¥–ª—è –ª—É—á—à–µ–π —ç–Ω—Ç—Ä–æ–ø–∏–∏ –Ω–∞ Linux
            try:
                with open('/dev/urandom', 'rb') as f:
                    rand_bytes = f.read(8)
                    rand_val = int.from_bytes(rand_bytes, 'big')
                start_key = global_start + (rand_val % (max_start - global_start + 1))
            except:
                # fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π random
                start_key = random.randint(global_start, max_start)

        end_key = start_key + range_size - 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        if end_key > global_end:
            end_key = global_end

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        range_hash = f"{start_key}-{end_key}"
        if range_hash in used_ranges:
            # –ï—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π (–æ–≥—Ä–∞–Ω–∏—á–∏–º —Ä–µ–∫—É—Ä—Å–∏—é)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ —Ä–µ–∫—É—Ä—Å–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å RecursionError
            max_attempts = 100  # –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            attempts = 0
            while range_hash in used_ranges and attempts < max_attempts:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –∏ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ç–æ—á–∫—É
                range_size = random.randint(min_range_size, max_range_size)
                max_start = global_end - range_size + 1
                if max_start < global_start:
                    max_start = global_start
                if platform.system() == 'Windows':
                    start_key = random.SystemRandom().randint(global_start, max_start)
                else:
                    try:
                        with open('/dev/urandom', 'rb') as f:
                            rand_bytes = f.read(8)
                            rand_val = int.from_bytes(rand_bytes, 'big')
                        start_key = global_start + (rand_val % (max_start - global_start + 1))
                    except:
                        start_key = random.randint(global_start, max_start)
                end_key = start_key + range_size - 1
                if end_key > global_end:
                    end_key = global_end
                range_hash = f"{start_key}-{end_key}"
                attempts += 1

            if attempts >= max_attempts:
                # –ï—Å–ª–∏ –≤—Å–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π, –æ—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
                if len(used_ranges) >= max_saved_random:
                    used_ranges.clear()
                # –ò–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                # error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫"
                # logger.warning(error_msg)
                # return None, None, error_msg
                # –ò–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º (–Ω–µ—É–Ω–∏–∫–∞–ª—å–Ω—ã–º) –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º, –µ—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                # pass # –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        used_ranges.add(range_hash)
        # if len(used_ranges) > max_saved_random: # –£–±–∏—Ä–∞–µ–º —ç—Ç–æ, —Ç–∞–∫ –∫–∞–∫ set —Å–∞–º —Å–µ–±—è –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –ø–æ —Ä–∞–∑–º–µ—Ä—É
        #     # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
        #     used_ranges.pop()  # set –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç pop –ø–æ –∏–Ω–¥–µ–∫—Å—É, —É–¥–∞–ª–∏–º —Å–ª—É—á–∞–π–Ω—ã–π
        #     # –õ—É—á—à–µ: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å collections.deque(maxlen=max_saved_random) –≤–º–µ—Å—Ç–æ set, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ

        return start_key, end_key, None

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ GPU: {str(e)}"
        logger.exception(error_msg)
        return None, None, error_msg  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI


# –í –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é (–∏–ª–∏ –ª—É—á—à–µ –ø–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –µ—ë –≤ utils/helpers.py)
def get_gpu_status(device_id=0):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å GPU (–∑–∞–≥—Ä—É–∑–∫–∞, –ø–∞–º—è—Ç—å –∏ —Ç.–¥.) —á–µ—Ä–µ–∑ pynvml.
    :param device_id: ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ GPU (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
    :return: dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ GPU –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    if not PYNVML_AVAILABLE:
        return None

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        # –õ—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä –≤ __init__ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        # if not hasattr(get_gpu_status, '_initialized'):
        #     pynvml.nvmlInit()
        #     get_gpu_status._initialized = True

        # –ü–æ–ª—É—á–∞–µ–º handle —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        handle = pynvml.nvmlDeviceGetHandleByIndex(device_id)

        # –ü–æ–ª—É—á–∞–µ–º —É—Ç–∏–ª–∏–∑–∞—Ü–∏—é (–∑–∞–≥—Ä—É–∑–∫—É)
        util_info = pynvml.nvmlDeviceGetUtilizationRates(handle)
        gpu_util = util_info.gpu  # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ %

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏
        mem_info = pynvml.nvmlDeviceGetMemoryInfo(handle)
        mem_used_mb = mem_info.used / (1024 * 1024)
        mem_total_mb = mem_info.total / (1024 * 1024)
        mem_util = (mem_info.used / mem_info.total) * 100 if mem_info.total > 0 else 0

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        try:
            temp_info = pynvml.nvmlDeviceGetTemperature(handle, pynvml.NVML_TEMPERATURE_GPU)
            temperature = temp_info
        except pynvml.NVMLError:
            temperature = None # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞

        return {
            'device_id': device_id,
            'gpu_utilization': gpu_util,
            'memory_used_mb': mem_used_mb,
            'memory_total_mb': mem_total_mb,
            'memory_utilization': mem_util,
            'temperature': temperature
        }
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å GPU {device_id}: {e}")
        return None